/* class01/ex00.c
 
課題名：atoi_simple
使用可能な関数：write
------------------------------------------*
コマンドライン引数として与えられた文字列を整数に変換し、その結果を標準出力に出力するプログラムを書きなさい。
文字列は正の整数のみを含むと仮定します。
引数が1つでない場合、または文字列に数字以外の文字が含まれている場合は、"Error"と出力してください。*
例：
$> ./atoi_simple 42
42
$> ./atoi_simple 123 456
Error
$> ./atoi_simple 123a
Error

/* class01/ex01.c
 
課題名：atoi_range
使用可能な関数：write
------------------------------------------*
コマンドライン引数として与えられた文字列を整数に変換し、その結果が0から100の範囲内であれば
"Valid"を、範囲外であれば"Invalid"を出力するプログラムを書きなさい。
引数が1つでない場合、または文字列に数字以外の文字が含まれている場合は、"Error"と出力してください。*
例：
$> ./atoi_range 42
Valid
$> ./atoi_range 101
Invalid
$> ./atoi_range 42 101
Error

/* class01/ex02.c
 
課題名：atoi_sum
使用可能な関数：write
------------------------------------------*
コマンドライン引数として与えられた複数の整数の合計を計算し、結果を出力するプログラムを書きなさい。
引数がない場合、または文字列に数字以外の文字が含まれている場合は、"Error"と出力してください。*
例：
$> ./atoi_sum 1 2 3
6
$> ./atoi_sum 10 20 30 40
100
$> ./atoi_sum
Error
$> ./atoi_sum 1 2 3a
Error

/* class01/ex03.c
 
課題名：atoi_max
使用可能な関数：write
------------------------------------------*
コマンドライン引数として与えられた複数の整数の中から最大値を見つけ、出力するプログラムを書きなさい。
引数が1つ未満の場合、または文字列に数字以外の文字が含まれている場合は、"Error"と出力してください。*
例：
$> ./atoi_max 1 5 3 2
5
$> ./atoi_max 10 20 30 40
40
$> ./atoi_max
Error
$> ./atoi_max 1 2 3a
Error

/* class01/ex04.c
 
課題名：atoi_even_odd
使用可能な関数：write
------------------------------------------*
コマンドライン引数として与えられた整数が偶数なら"Even"を、奇数なら"Odd"を出力するプログラムを書きなさい。
引数が1つでない場合、または文字列に数字以外の文字が含まれている場合は、"Error"と出力してください。*
例：
$> ./atoi_even_odd 42
Even
$> ./atoi_even_odd 17
Odd
$> ./atoi_even_odd 1 2
Error
$> ./atoi_even_odd 3a
Error

/* class01/ex05.c
 
課題名：atoi_factorial
使用可能な関数：write
------------------------------------------*
コマンドライン引数として与えられた非負整数の階乗を計算し、結果を出力するプログラムを書きなさい。
引数が1つでない場合、負の数の場合、または文字列に数字以外の文字が含まれている場合は、"Error"と出力してください。*
例：
$> ./atoi_factorial 5
120
$> ./atoi_factorial 0
1
$> ./atoi_factorial -1
Error
$> ./atoi_factorial 3a
Error

/* class01/ex06.c
 
課題名：atoi_prime
使用可能な関数：write
------------------------------------------*
コマンドライン引数として与えられた整数が素数かどうかを判定し、素数なら"Prime"を、
そうでなければ"Not Prime"を出力するプログラムを書きなさい。
引数が1つでない場合、または文字列に数字以外の文字が含まれている場合は、"Error"と出力してください。*
例：
$> ./atoi_prime 17
Prime
$> ./atoi_prime 24
Not Prime
$> ./atoi_prime 2 3
Error
$> ./atoi_prime 7a
Error

/* class01/ex07.c
 
課題名：atoi_fibonacci
使用可能な関数：write
------------------------------------------*
コマンドライン引数として与えられた非負整数nに対して、フィボナッチ数列のn番目の値を計算し、
結果を出力するプログラムを書きなさい。
引数が1つでない場合、負の数の場合、または文字列に数字以外の文字が含まれている場合は、"Error"と出力してください。*
例：
$> ./atoi_fibonacci 7
13
$> ./atoi_fibonacci 0
0
$> ./atoi_fibonacci -1
Error
$> ./atoi_fibonacci 5a
Error

/* class01/ex08.c
 
課題名：atoi_reverse
使用可能な関数：write
------------------------------------------*
コマンドライン引数として与えられた整数を逆順にして出力するプログラムを書きなさい。
引数が1つでない場合、または文字列に数字以外の文字が含まれている場合は、"Error"と出力してください。*
例：
$> ./atoi_reverse 12345
54321
$> ./atoi_reverse 100
001
$> ./atoi_reverse 42 24
Error
$> ./atoi_reverse 1a
Error

/* class01/ex09.c
 
課題名：atoi_binary
使用可能な関数：write
------------------------------------------*
コマンドライン引数として与えられた非負整数を2進数に変換し、結果を出力するプログラムを書きなさい。
引数が1つでない場合、負の数の場合、または文字列に数字以外の文字が含まれている場合は、"Error"と出力してください。*
例：
$> ./atoi_binary 42
101010
$> ./atoi_binary 15
1111
$> ./atoi_binary -1
Error
$> ./atoi_binary 3a
Error

/* class01/ex10.c
 
課題名：atoi_hex_to_dec
使用可能な関数：write
------------------------------------------*
コマンドライン引数として与えられた16進数の文字列を10進数に変換し、結果を出力するプログラムを書きなさい。
引数が1つでない場合、または無効な16進数文字列の場合は、"Error"と出力してください。
16進数文字列は "0x" または "0X" で始まる必要があります。*
例：
$> ./hex_to_dec 0x1A
26
$> ./hex_to_dec 0xFF
255
$> ./hex_to_dec 1A
Error
$> ./hex_to_dec 0xG1
Error

/* class01/ex11.c
 
課題名：atoi_base_converter
使用可能な関数：write
------------------------------------------*
コマンドライン引数として、数値、元の基数、変換先の基数の3つを受け取り、
指定された基数間で数値を変換するプログラムを書きなさい。
基数は2から36までの範囲内とし、36以上の基数では英字を使用します。
引数が3つでない場合、または無効な入力の場合は、"Error"と出力してください。*
例：
$> ./base_converter 42 10 16
2A
$> ./base_converter 1010 2 10
10
$> ./base_converter FF 16 2
11111111
$> ./base_converter 42 10 37
Error


/* class01/ex12.c

課題名： last_parameter
使用可能な関数：write
------------------------------------------*
文字列をコマンドライン引数として受け取り、そのコマンドライン引数の最後の項目と改行を
標準出力に出力するプログラムを書きなさい。
コマンドライン引数の数が1つ未満の場合、改行だけを標準出力に出力すること。

例：
$> ./aff_last_param "abc" "123" "Hello World"
Hello World
$> ./aff_last_param

$> ./aff_last_param "単一の引数"
単一の引数



/* class01/ex13.c
 
課題名：atoi_calculator
使用可能な関数：write
------------------------------------------*
コマンドライン引数として簡単な数式を受け取り、その結果を計算して出力するプログラムを書きなさい。
数式は整数と +, -, *, / の四則演算子のみを含むものとします。
括弧や小数点、べき乗などは考慮しません。
引数が1つでない場合、または無効な数式の場合は、"Error"と出力してください。*
例：
$> ./calculator "5 + 3 * 2"
11
$> ./calculator "10 - 4 / 2"
8
$> ./calculator "2 + 2 *"
Error
$> ./calculator "3.14 + 2"
Error

/* class01/ex14.c
 
課題名：atoi_ip_validator
使用可能な関数：write
------------------------------------------*
コマンドライン引数としてIPv4アドレスの文字列を受け取り、その有効性を検証するプログラムを書きなさい。
有効なIPv4アドレスの場合は"Valid"を、無効な場合は"Invalid"を出力してください。
引数が1つでない場合は、"Error"と出力してください。*
例：
$> ./ip_validator 192.168.0.1
Valid
$> ./ip_validator 256.1.2.3
Invalid
$> ./ip_validator 192.168.0
Invalid
$> ./ip_validator 192.168.0.1 10.0.0.1
Error

/* class01/ex15.c
 
課題名：atoi_date_calculator
使用可能な関数：write
------------------------------------------*
コマンドライン引数として日付（YYYY-MM-DD形式）と日数を受け取り、
指定された日数後の日付を計算して出力するプログラムを書きなさい。
うるう年も考慮してください。
引数が2つでない場合、または無効な入力の場合は、"Error"と出力してください。*
例：
$> ./date_calculator 2023-03-15 10
2023-03-25
$> ./date_calculator 2024-02-28 2
2024-03-01
$> ./date_calculator 2023-13-01 5
Error
$> ./date_calculator 2023-01-01
Error

/* class01/ex16.c
 
課題名：atoi_parse_csv
使用可能な関数：write, malloc, free
------------------------------------------*
コマンドライン引数としてCSV形式の文字列を受け取り、各フィールドを解析して出力するプログラムを書きなさい。
フィールドにカンマが含まれる場合、そのフィールドは二重引用符で囲まれているものとします。
各フィールドを新しい行に出力し、フィールド間に空行を入れてください。
引数が1つでない場合、または無効なCSV形式の場合は、"Error"と出力してください。*
例：
$> ./parse_csv "apple,banana,cherry"
apple*
banana*
cherry
$> ./parse_csv "1,"2,3",4"
1*
2,3*
4
$> ./parse_csv "invalid""csv"
Error

/* class01/ex17.c
 
課題名：atoi_morse_code
使用可能な関数：write
------------------------------------------*
コマンドライン引数として英数字の文字列を受け取り、それをモールス信号に変換して出力するプログラムを書きなさい。
モールス信号では、文字間は1つのスペース、単語間は3つのスペースで区切ります。
大文字と小文字は区別しません。
引数が1つでない場合、または無効な文字が含まれる場合は、"Error"と出力してください。*
例：
$> ./morse_code "SOS"
... --- ...
$> ./morse_code "HELLO WORLD"
.... . .-.. .-.. ---   .-- --- .-. .-.. -..
$> ./morse_code "H3llo"
.... ...-- .-.. .-.. ---
$> ./morse_code "Invalid@"
Error

/* class01/ex18.c
 
課題名：atoi_isbn_validator
使用可能な関数：write
------------------------------------------*
コマンドライン引数としてISBN-13の文字列を受け取り、その有効性を検証するプログラムを書きなさい。
有効なISBN-13の場合は"Valid"を、無効な場合は"Invalid"を出力してください。
ISBNは13桁の数字で構成され、最後の1桁はチェックディジットです。
ハイフンは無視してください。
引数が1つでない場合は、"Error"と出力してください。*
例：
$> ./isbn_validator 9780306406157
Valid
$> ./isbn_validator 978-0-306-40615-7
Valid
$> ./isbn_validator 9780306406158
Invalid
$> ./isbn_validator 978030640615
Error

/* class01/ex19.c
 
課題名：atoi_rpn_calculator
使用可能な関数：write, atoi, malloc, free
------------------------------------------*
コマンドライン引数として逆ポーランド記法（RPN）の数式を受け取り、その結果を計算して出力するプログラムを書きなさい。
演算子は +, -, *, / の四則演算のみを扱います。
各要素（数値や演算子）はスペースで区切られているものとします。
スタックを使用して計算を行ってください。
引数が1つでない場合、または無効な式の場合は、"Error"と出力してください。*
例：
$> ./rpn_calculator "3 4 +"
7
$> ./rpn_calculator "5 2 3 + *"
25
$> ./rpn_calculator "3 4 + -"
Error
$> ./rpn_calculator "3 4 ++ 5"
Error

